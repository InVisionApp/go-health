// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/InVisionApp/go-health"
)

type FakeICheckable struct {
	StatusStub        func(ctx context.Context) (interface{}, error)
	statusMutex       sync.RWMutex
	statusArgsForCall []struct {
		ctx context.Context
	}
	statusReturns struct {
		result1 interface{}
		result2 error
	}
	statusReturnsOnCall map[int]struct {
		result1 interface{}
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeICheckable) Status(ctx context.Context) (interface{}, error) {
	fake.statusMutex.Lock()
	ret, specificReturn := fake.statusReturnsOnCall[len(fake.statusArgsForCall)]
	fake.statusArgsForCall = append(fake.statusArgsForCall, struct {
		ctx context.Context
	}{ctx})
	fake.recordInvocation("Status", []interface{}{ctx})
	fake.statusMutex.Unlock()
	if fake.StatusStub != nil {
		return fake.StatusStub(ctx)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.statusReturns.result1, fake.statusReturns.result2
}

func (fake *FakeICheckable) StatusCallCount() int {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return len(fake.statusArgsForCall)
}

func (fake *FakeICheckable) StatusArgsForCall(i int) context.Context {
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	return fake.statusArgsForCall[i].ctx
}

func (fake *FakeICheckable) StatusReturns(result1 interface{}, result2 error) {
	fake.StatusStub = nil
	fake.statusReturns = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeICheckable) StatusReturnsOnCall(i int, result1 interface{}, result2 error) {
	fake.StatusStub = nil
	if fake.statusReturnsOnCall == nil {
		fake.statusReturnsOnCall = make(map[int]struct {
			result1 interface{}
			result2 error
		})
	}
	fake.statusReturnsOnCall[i] = struct {
		result1 interface{}
		result2 error
	}{result1, result2}
}

func (fake *FakeICheckable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.statusMutex.RLock()
	defer fake.statusMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeICheckable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ health.ICheckable = new(FakeICheckable)
